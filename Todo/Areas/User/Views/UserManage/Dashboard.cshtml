@model Todo.Models.ViewModels.DashboardData;

@using Microsoft.AspNetCore.Identity;
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    if (SignInManager.IsSignedIn(User))
    {
    <div class="navbar">
                    <i class="fa-solid fa-house home-button"></i>
                    <a asp-area="User" asp-controller="UserManage" asp-action="EditUser">@Model.User.ApplicationUserName<i class="fa-solid fa-user"></i></a>
    </div>
    }
}

<div class="body container">
    <h2 class="mt-3 mb-3">@Model.User.ApplicationUserName Dashboard</h2>
    
    <hr />
    <div class="row">
        <div class="graph-overview today-overview first-section col-12 col-md-4 bg-white shadow rounded border p-5" style="margin: 10px auto 10px 0px;">
            <canvas id="today-overview"></canvas>
        </div>
        <div class="graph-overview todays-goal first-section col-12 col-md-3 bg-white shadow rounded border p-5" style="margin: 10px 0px 10px auto;">
            <canvas id="todays-goal"></canvas>
        </div>
        <div class="graph-overview last-seven-days-overview first-section col-12 col-md-4 bg-white shadow rounded border p-5" style="margin: 10px auto 10px auto;">
            <canvas id="last-seven-days-overview"></canvas>
        </div>
    </div>
    
    <hr />
    <div class="thir-section row">
        @* <div class="today-overview first-section col-12 col-md-6 bg-white shadow rounded border p-5" style="margin: 10px auto 10px auto;">
            <canvas id="this-month-overview"></canvas>
        </div> *@
        <div class="graph-overview last-seven-days-overview first-section col-12 col-md-12 bg-white shadow rounded border p-5" style="margin: 10px auto 10px auto;">
            <canvas id="this-year-overview"></canvas>
        </div>
    </div>
    <div class="third-section">
        <div class="upcoming-tasks"></div>
        <div class="calender"></div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const LastSevenDays = document.getElementById('last-seven-days-overview');
        const TodayOverview = document.getElementById('today-overview');
        const TodaysGoal = document.getElementById('todays-goal');
        const YearOverview = document.getElementById('this-year-overview');
        const MonthOverview = document.getElementById('this-month-overview');


        // First Chart

        const labelsTwo = ["00:00-09:00", "09:00-11:00", "12:00-15:00", "15:00-18:00", "18:00-21:00", "21:00-24:00"];
        const dataTwo = {
            labels: labelsTwo,
            datasets: [{
                label: '',
                data: [@Model.SixAMChecked.Count, 
                    @Model.NineAMChecked.Count, 
                    @Model.TwelveAMChecked.Count, 
                    @Model.FifteenAMChecked.Count, 
                    @Model.EightenAMChecked.Count, 
                    @Model.TwentyOneAMChecked.Count
                ],
                fill: false,
                tension: 0.1,
                backgroundColor: [
                    'rgb(54, 162, 235)'
                ],
                borderColor: [
                    'rgb(54, 162, 235)'
                ],
            }]
        };

        new Chart(TodayOverview, {
            type: 'bar',
            data: dataTwo,
            options: {
                maintainAspectRatio: false,
            }
        })

        // Second Chart

        const labelsOne = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"];
        const dataOne = {
            labels: labelsOne,
            datasets: [{
                label: '',
                data: [@Model.MondayChecked.Count, 
                    @Model.ThuesdayChecked.Count, 
                    @Model.WednesDayChecked.Count, 
                    @Model.ThursdayChecked.Count, 
                    @Model.FridayChecked.Count, 
                    @Model.SaturdayChecked.Count, 
                    @Model.SondayChecked.Count
                ],
                fill: false,
                tension: 0.1,
                backgroundColor: [
                    'rgb(54, 162, 235)'
                ],
                borderColor: [
                    'rgb(54, 162, 235)'
                ],
            }]
        };

        new Chart(LastSevenDays, {
            type: 'line',
            data: dataOne,
            options: {
                maintainAspectRatio: false,
            }
        })

        // Third Chart
        var thirdChartMaxVal = 5 - @Model.TodaysCheckedEntries.Count;
        if (thirdChartMaxVal <= 0) {
            thirdChartMaxVal = 0;
        }
        const labelsThree = ["Erledigte Aufgaben", "Verbleibende"];
        const dataThree = {
            labels: labelsThree,
            datasets: [{
                data: [@Model.TodaysCheckedEntries.Count, thirdChartMaxVal],
                fill: false,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                backgroundColor: [
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                ],
            }]
        };

        new Chart(TodaysGoal, {
            type: 'pie',
            data: dataThree,
            options: {
                maintainAspectRatio: false,
            }
        })


        // Fifth Chart
        const labelsFive = ["Januar", "Vebruar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];
        const dataFive = {
            labels: labelsFive,
            datasets: [{
                label: '',
                data: [@Model.JanuaryChecked.Count, 
                    @Model.FebruaryChecked.Count, 
                    @Model.MarchChecked.Count, 
                    @Model.AptrilChecked.Count, 
                    @Model.MayChecked.Count, 
                    @Model.JuneChecked.Count,
                    @Model.JulyChecked.Count,
                    @Model.AugustChecked.Count,
                    @Model.SeptemberChecked.Count,
                    @Model.OktoberChecked.Count,
                    @Model.NovemberChecked.Count,
                    @Model.DecemberChecked.Count
                ],
                fill: false,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                backgroundColor: [
                    'rgb(54, 162, 235)',
                ],
            }]
        };

        new Chart(YearOverview, {
            type: 'line',
            data: dataFive,
            options: {
                maintainAspectRatio: false,
            }
        })
    });
</script>